PROCEDURE Dotproduct(v1,v2:array_of_INTEGER , Var Dot:INTEGER)

VAR
    i:INTEGER;
BEGIN
    Dot:=0;
    IF (v1.length<>v2.length) THEN
        Write ("please  provide equal length for both arrays")
        ELSE{
            FOR i FROM 0 TO v1.length-1 STEP 1  DO
                Dot:=Dot+v1[i]*v2[i]
            END_FOR
        Write (Dot);
        }
    END_IF
END
ALGORITHM scalar
VAR
    lv1:array_of_Arrays
    lv2:array_of_Arrays
    scalar,i,j:INTEGER
BEGIN
    FOR i FROM 0 TO lv1.length-1 STEP 1 DO
         FOR j FROM 0 TO lv2.length-1 STEP 1  DO
             DotProduct(lv1[i],lv[j],scalar)
             IF (scalar=0) THEN
                 write(lv[i],lv[j],"sont orthoghonales")

                 ELSE
                    write(lv[i],lv[j],"ne sont pas  orthoghonales")

             END_IF
         END_FOR
    END_FOR
END
FUNCTION function_scalar(v1,v2:Array_of_INTEGER) : INTEGER
VAR
   i:INTEGER;
BEGIN
    Dot:=0;
    IF (v1.length<>v2.length) THEN
            FOR i FROM 0 TO v1.length-1 STEP 1  DO
                Dot:=Dot+v1[i]*v2[i]
            END_FOR

    }   
    END_IF
    Return Dot;
END
ALGORITHM scalar
VAR
    lv1:array_of_Arrays
    lv2:array_of_Arrays
    scalar,i,j:INTEGER
BEGIN
    FOR i FROM 0 TO lv1.length-1 STEP 1 DO
         FOR j FROM 0 TO lv2.length-1 STEP 1  DO
             scalar:=function_Scalar (lv1[i],lv[j])
             IF (scalar=0) THEN
                 write(lv[i],lv[j],"sont orthoghonales")

                 ELSE
                    write(lv[i],lv[j],"ne sont pas  orthoghonales")

             END_IF
         END_FOR
    END_FORs
END



